{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>SSave is a simple save file system for GameMaker, available on GitHub and Itch.io.</p> <ul> <li>If you're new to SSave, check out the Getting Started guide.</li> <li>If you're looking for code snippets/examples of SSave in use, check out the Examples page.</li> <li>Otherwise, browse the Documentation for a full reference of the API.</li> </ul>"},{"location":"config/","title":"Config","text":"<p>Located in <code>scr_ssave_config</code>, you can modify various options to your liking.</p>"},{"location":"config/#ssave_directory","title":"<code>SSAVE_DIRECTORY</code>","text":"<p>Type: <code>String</code></p> <p>The directory that saves are written to.</p>"},{"location":"config/#ssave_file_prefix_default","title":"<code>SSAVE_FILE_PREFIX_DEFAULT</code>","text":"<p>Type: <code>String</code></p> <p>When no file prefix is defined (for the various functions that have an optional <code>filePrefix</code> argument), this value is used.</p>"},{"location":"config/#ssave_use_manager","title":"<code>SSAVE_USE_MANAGER</code>","text":"<p>Type: <code>Boolean</code></p> <p>When enabled, a persistant instance of <code>SSaveManager</code> is created and can be used to manage saves via the functions listed here.</p>"},{"location":"config/#ssave_protection_default","title":"<code>SSAVE_PROTECTION_DEFAULT</code>","text":"<p>Type: <code>SSAVE_PROTECTION</code></p> <p>The default protection level used when <code>set_protection</code> has not already been called.</p>"},{"location":"config/#ssave_encryption_key","title":"<code>SSAVE_ENCRYPTION_KEY</code>","text":"<p>Type: <code>Real</code></p> <p>The encryption key used when save protection is set to <code>SSAVE_PROTECTION.ENCRYPT</code>.</p>"},{"location":"config/#ssave_copy_buffer_on_set","title":"<code>SSAVE_COPY_BUFFER_ON_SET</code>","text":"<p>Type: <code>Boolean</code></p> <p>If true, when setting a buffer into a save value, this will copy the buffer so that you may safely delete the original.</p>"},{"location":"config/#ssave_error_on_set_invalid_type","title":"<code>SSAVE_ERROR_ON_SET_INVALID_TYPE</code>","text":"<p>Type: <code>Boolean</code></p> <p>If true, when setting a value with a type other than what was defined, throw an error. If false, a message is printed instead.</p>"},{"location":"enums/","title":"Enums","text":""},{"location":"enums/#ssave_type","title":"<code>SSAVE_TYPE</code>","text":"<p>Used to denote which type a save value uses.</p> <ul> <li><code>STRING</code></li> <li><code>REAL</code></li> <li><code>BOOLEAN</code></li> <li><code>STRUCT</code></li> <li><code>ARRAY</code></li> <li><code>BUFFER</code></li> </ul>"},{"location":"enums/#ssave_protection","title":"<code>SSAVE_PROTECTION</code>","text":"<p>Used to denote different levels of file protection.</p> <ul> <li><code>NONE</code><ul> <li>Save data is stored in plaintext json - good if you don't care about tampering (I highly recommend using this option!!)</li> </ul> </li> <li><code>ENCODE</code><ul> <li>Save data is stored in base64 encoded json - good if you want most players to not know how to tamper</li> </ul> </li> <li><code>ENCRYPT</code><ul> <li>Save data is encrypted with <code>SSAVE_ENCRYPTION_KEY</code> - good if you want most players to be unable to tamper. This is NOT secure enough for sensitive data</li> </ul> </li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#file-format-external-editing","title":"File Format + External Editing","text":"<p>Saved files are split into two sections: the header and the data.</p> <ul> <li>The header reserves 64 bytes of the start of the file, and is used to store internal information about the save. Do not edit this section as it will corrupt your save file.</li> <li>The data, depending on what <code>SSAVE_PROTECTION</code> level you set, may be represented in plaintext, encoded or encrypted json.</li> </ul> <p></p> <p>If you want to edit your save files externally, make sure you're using a file editor that won't interfere with the header information (like Notepad++), otherwise you could get a corrupted file.</p>"},{"location":"examples/#using-ssave-without-the-manager","title":"Using SSave Without the Manager","text":"<p>While the <code>SSaveManager</code> is a convenient, hands-off way to handle and cache saves, you may find yourself wanting more control.</p> <p>Assuming you have a <code>SaveFile</code> class like this:</p> <pre><code>function SaveFile() : SSave() constructor {\n    // ...\n}\n</code></pre> <p>Instead of using <code>ssave_get()</code>, you can directly create an instance of <code>SaveFile</code> and manage it manually:</p> <pre><code>var _save = new SaveFile();\n_save.load();\n</code></pre> <p>Using the <code>new</code> operator will create an empty <code>SaveFile</code> instance. Now you can call <code>load()</code> to populate it with data from disk, or <code>save()</code> to write the current state to disk as usual. You'll likely need to create some kind of persistent object/script to store your saves, else you will incur a performance pentaly by constantly loading your save every time you need it.</p>"},{"location":"examples/#multiple-saves","title":"Multiple Saves","text":"<p>If you want to have different save files of the same class, you can! When saving and loading files, you are given the option to specify a file prefix. Using this, we can store multiple saves of the same class without overwriting each other. File prefixes can be any number or string.</p>"},{"location":"examples/#using-the-manager","title":"Using the Manager","text":"<p>If you're using the <code>SSaveManager</code>, the second argument in <code>ssave_get()</code> is the file prefix.</p> <pre><code>var _saveSlot1 = ssave_get(SaveFile, 1);\nvar _saveSlot2 = ssave_get(SaveFile, 2);\nvar _saveFoo = ssave_get(SaveFile, \"foo\");\n</code></pre>"},{"location":"examples/#when-not-using-the-manager","title":"When Not Using the Manager","text":"<p>If you're manually creating instaces of your save class, you'd need to use the <code>set_file_prefix()</code> method.</p> <pre><code>var _saveSlot1 = new SaveFile();\n_saveSlot1.set_file_prefix(1);\n_saveSlot1.load();\n\nvar _saveSlot2 = new SaveFile();\n_saveSlot2.set_file_prefix(2);\n_saveSlot2.load();\n\nvar _saveFoo = new SaveFile();\n_saveFoo.set_file_prefix(\"foo\");\n_saveFoo.load();\n</code></pre>"},{"location":"examples/#encoding-or-encrypting-saves","title":"Encoding or Encrypting Saves","text":"<p>If you feel the need to encode or encrypt your saves, you can!</p> <p>By setting your desired <code>SSAVE_PROTECTION</code> level via <code>set_protection()</code>, the next time you call <code>save()</code> the file will be written with the specified protection. The protection level is cached, so you only need to call it once per change.</p> <p>When you call <code>load()</code>, SSave will automatically detect the protection level and decode/decrypt the file accordingly; you don't need to call <code>set_protection()</code> again.</p> <pre><code>// saving\nvar _save = new SaveFile();\n_save.set_protection(SSAVE_PROTECTION.ENCRYPT);\n_save.save();\n\n// loading\nvar _save = new SaveFile();\n_save.load();\nvar _protection = _save.get_protection(); // returns SSAVE_PROTECTION.ENCRYPT\n</code></pre> <p>You can edit the <code>SSAVE_PROTECTION_DEFAULT</code> configuration to change the default protection level for all saves which have not yet had their protection set.</p>"},{"location":"examples/#deleting-saved-files","title":"Deleting Saved Files","text":"<p>If you want to delete a saved file, you can use the <code>ssave_erase()</code> or <code>erase()</code> functions.</p> <pre><code>// Using the manager\nssave_erase(SaveFile);\n\n// Not using the manager\nvar _save = new SaveFile();\n_save.erase();\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>The purpose of this tool is to provide a simple way to manage saves and user settings in your project. Once you understand the basics, you can very easily integrate it into your games.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Download the latest release from GitHub or Itch.io. In GameMaker, go to <code>Tools &gt; Import Local Package</code> and select the downloaded <code>.yymps</code> file.</p> <p>You'll see two folders: <code>SSave</code> and <code>Demo</code>. The demo includes a demonstration of the SSave system in use, if you aren't going to try it out, you only need to import the <code>SSave</code> folder.</p>"},{"location":"getting-started/#setting-up-a-savefile-class","title":"Setting Up a SaveFile Class","text":"<p>Create a new script and inside it, add this code:</p> <pre><code>function SaveFile() : SSave(\"save\") constructor {\n    add_value(\"points\", SSAVE_TYPE.REAL, 0);\n}\n</code></pre> <p>This creates a new save file class that contains a <code>points</code> value. The <code>\"save\"</code> argument in the <code>SSave(\"save\")</code> constructor is the name of the file that gets saved to disk. For example, this will save to <code>save.ssave</code>. You can leave out this argument, in which case it will default to <code>data.ssave</code>.</p> <p>When creating save classes, you need to extend the <code>SSave</code> class. This is so you can call the <code>add_value()</code> method within it's constructor.</p>"},{"location":"getting-started/#working-with-the-savefile-class","title":"Working With the SaveFile Class","text":""},{"location":"getting-started/#setup","title":"Setup","text":"<p>Before we start, create a new object and add this code to it:</p> Create Event<pre><code>points = 0;\n\n// we will define these functions later\nSave = function() { };\nLoad = function() { };\n\nLoad();\n</code></pre> Step Event<pre><code>if (keyboard_check_pressed(vk_space)) {\n    points += 1;\n}\n\nif (mouse_check_button_pressed(mb_left)) {\n    Save();\n}\n\nif (mouse_check_button_pressed(mb_right)) {\n    Load();\n}\n</code></pre> Draw Event<pre><code>draw_text(0, 0, $\"Points: {points}\");\n</code></pre> <p>Now that we have this basic object set up, we can begin implementing the <code>Save</code> and <code>Load</code> functions.</p>"},{"location":"getting-started/#saving-and-loading","title":"Saving and Loading","text":"<p>When accessing save files, you have two options: manually creating save instances or allowing the <code>SSaveManager</code> to handle it for you.</p> <p>Here I will cover how to use the manager, as it greatly simplifies the process of managing your saves. If you want to see an example of how to manage saves manually, check out this example.</p> Create Event<pre><code>Save = function() {\n    var _save = ssave_get(SaveFile);\n    _save.set(\"points\", points);\n    _save.save();\n}\n\nLoad = function() {\n    var _save = ssave_get(SaveFile);\n    points = _save.get(\"points\");\n}\n</code></pre> <p>The bread-and-butter of this code is the <code>ssave_get()</code> function, which retrieves a persistent instance of the <code>SaveFile</code> class. If it has not yet been loaded, it will automatically do so. If there is no file on disk to load, the class will just have the default values.</p> <p>Once you've called <code>ssave_get()</code> for the first time, the save class will be stored inside of the manager. Subsequent calls to <code>ssave_get()</code> will return this same instance, allowing you efficiently access and modify the save data from anywhere in your code without needing to load the file each time.</p>"},{"location":"getting-started/#multiple-saves","title":"Multiple Saves","text":"<p>What if we want to have multiple slots of <code>SaveFile</code>? This is where the <code>filePrefix</code> argument comes in.</p> <p>Right now, our save file is reading and writing to <code>save.ssave</code>. If we set <code>filePrefix</code> to <code>1</code>, it would read and write to <code>1save.ssave</code>.</p> <p>Using this, we can modify our <code>Save</code> and <code>Load</code> functions to treat the <code>filePrefix</code> as a slot index:</p> Create Event<pre><code>slotIndex = 0;\n\nSave = function() {\n    var _save = ssave_get(SaveFile, slotIndex);\n    _save.set(\"points\", points);\n    _save.save();\n}\n\nLoad = function() {\n    var _save = ssave_get(SaveFile, slotIndex);\n    points = _save.get(\"points\");\n}\n\nSetSlotIndex = function(_slotIndex) {\n    Save(); // save the current slot before changing\n    slotIndex = _slotIndex;\n    Load(); // load the new slot\n}\n\nLoad();\n</code></pre> <p>Note: you can use any string or number as a prefix.</p> <p>And in our step event let's listen for keys 0-9 to change the slot index:</p> Step Event<pre><code>for (var i = 0; i &lt; 10; i++) {\n    if (keyboard_check_pressed(ord(string(i)))) {\n        SetSlotIndex(i);\n        break;\n    }\n}\n\n// rest of the code remains the same\n</code></pre>"},{"location":"getting-started/#chaining-functions","title":"Chaining Functions","text":"<p>SSave functions can be chained together for convenience. We could update the <code>Save</code> function to look like this:</p> Create Event<pre><code>Save = function() {\n    ssave_get(SaveFile, slotIndex)\n        .set(\"points\", points)\n        .save();\n}\n</code></pre> <p>If you're unsure which functions can be chained, take a look at the return type of functions in the <code>SSave</code> section.</p>"},{"location":"getting-started/#conclusion","title":"Conclusion","text":"<p>You should now be able to save via the left mouse button and load via the right mouse button. The points should increase when you press space. You can save to 10 different slots, and if you close and reopen the game your points will persist.</p>"},{"location":"ssave-manager/","title":"SSave Manager","text":""},{"location":"ssave-manager/#functions","title":"Functions","text":""},{"location":"ssave-manager/#ssave_getssaveconstructor-fileprefix","title":"<code>ssave_get(ssaveConstructor, [filePrefix])</code>","text":"<p>This can only be used if the <code>SSAVE_USE_MANAGER</code> configuration is <code>true</code>.</p> <p>Wrapper of SSaveManager.get.</p>"},{"location":"ssave-manager/#ssave_removessaveconstructor-fileprefix","title":"<code>ssave_remove(ssaveConstructor, [filePrefix])</code>","text":"<p>This can only be used if the <code>SSAVE_USE_MANAGER</code> configuration is <code>true</code>.</p> <p>Wrapper of SSaveManager.remove.</p>"},{"location":"ssave-manager/#ssave_erasessaveconstructor-fileprefix","title":"<code>ssave_erase(ssaveConstructor, [filePrefix])</code>","text":"Name Type Required? Default Description <code>ssaveConstructor</code> <code>Function</code> Yes \u2014 The constructor for the SSave class. <code>filePrefix</code> <code>String</code> No <code>SSAVE_FILE_PREFIX_DEFAULT</code> Optional file prefix. <p>This can only be used if the <code>SSAVE_USE_MANAGER</code> configuration is <code>true</code>.</p> <p>Searches for the file on disk matching the constructor and prefix, then deletes it if it exists.</p>"},{"location":"ssave-manager/#ssave_get_allssaveconstructor","title":"<code>ssave_get_all([ssaveConstructor])</code>","text":"<p>Returns <code>Array&lt;</code><code>SSave</code><code>&gt;</code> \u2013 an array of matching saves</p> Name Type Required? Default Description <code>ssaveConstructor</code> <code>Function</code> No <code>Undefined</code> The constructor for the SSave class. <p>This can only be used if the <code>SSAVE_USE_MANAGER</code> configuration is <code>true</code>.</p> <p>Iterates on all cached saves matching the constructor and returns an array of them.</p> <p>If no constructor is supplied, ALL saves (regardless of their constructor), are returned.</p>"},{"location":"ssave-manager/#ssavemanager","title":"SSaveManager","text":""},{"location":"ssave-manager/#ssavemanagergetssaveconstructor-fileprefix","title":"<code>SSaveManager.get(ssaveConstructor, [filePrefix])</code>","text":"<p>Returns <code>SSave</code> \u2013 the requested or created save instance</p> Name Type Required? Default Description <code>ssaveConstructor</code> <code>Function</code> Yes \u2014 The constructor for the SSave class. <code>filePrefix</code> <code>String</code> No <code>SSAVE_FILE_PREFIX_DEFAULT</code> Optional file prefix to use when loading. Useful for things like save slots <p>Looks for a cached save matching the constructor and prefix then returns it. If it hasn't yet been cached, first, it will create one (and load it's contents if the file exists).</p>"},{"location":"ssave-manager/#ssavemanagerremovessaveconstructor-fileprefix","title":"<code>SSaveManager.remove(ssaveConstructor, [filePrefix])</code>","text":"<p>Returns <code>Undefined</code></p> Name Type Required? Default Description <code>ssaveConstructor</code> <code>Function</code> Yes \u2014 The constructor for the SSave class. <code>filePrefix</code> <code>String</code> No <code>SSAVE_FILE_PREFIX_DEFAULT</code> Optional file prefix to use when loading. Useful for things like save slots <p>Looks for a cached save matching the constructor and prefix. If it exists, it will be destroyed and removed from the cache.</p>"},{"location":"ssave/","title":"SSave","text":""},{"location":"ssave/#constructor","title":"Constructor","text":""},{"location":"ssave/#ssavename-protection-constructor","title":"<code>SSave([name, protection]) constructor</code>","text":"Name Type Required? Default Description <code>name</code> <code>String</code> No <code>\"data\"</code> The name of the file that gets written to disk. For example, the default value would save to disk as <code>data.ssave</code>. <code>protection</code> <code>SSAVE_PROTECTION</code> No <code>SSAVE_PROTECTION_DEFAULT</code> The new protection level to set. <p>The constructor for the base SSave class. It is not intended to be used directly, but rather extended by other classes.</p> Defines a save file whose filename is 'save' and protection level is 'ENCODE'<pre><code>function SaveFile() : SSave(\"save\", SSAVE_PROTECTION.ENCODE) constructor {\n    // ...\n}\n</code></pre>"},{"location":"ssave/#ssaveadd_valuename-type-default","title":"<code>SSave.add_value(name, type, default)</code>","text":"<p>Returns <code>Undefined</code></p> Name Type Required? Default Description <code>name</code> <code>String</code> Yes - The name of the value. <code>type</code> <code>SSAVE_TYPE</code> Yes - The type of the value. <code>defaultValue</code> <code>Any</code> Yes - The default value. <p>This function is only intended to be used in the constructor when defining your save class.</p> Defines a value 'level' of type 'REAL' with a default value of 1<pre><code>function SaveFile() : SSave(\"save\", SSAVE_PROTECTION.ENCODE) constructor {\n    add_value(\"level\", SSAVE_TYPE.REAL, 1);\n}\n</code></pre>"},{"location":"ssave/#class-functions","title":"Class Functions","text":""},{"location":"ssave/#ssaveloadfileprefix","title":"<code>SSave.load([filePrefix])</code>","text":"<p>Returns <code>Boolean</code> \u2013 returns success</p> Name Type Required? Default Description <code>filePrefix</code> <code>String</code> OR <code>Real</code> No <code>\"\"</code> The prefix of the filename. Usually, you can leave this empty--but it can be useful for things like multiple save slots. <p>Loads a save from disk.</p>"},{"location":"ssave/#ssavesave","title":"<code>SSave.save()</code>","text":"<p>Returns <code>Boolean</code> \u2013 returns success</p> <p>Saves the current state of the save to disk.</p>"},{"location":"ssave/#ssavegetname","title":"<code>SSave.get(name)</code>","text":"<p>Returns <code>Any</code> \u2013 the current value</p> Name Type Required? Default Description <code>name</code> <code>String</code> Yes - The name of the value. <p>Retrieves the current value of the specified name. If the value does not exist, it will return the default value defined in <code>add_value()</code>.</p>"},{"location":"ssave/#ssaveget_defaultname","title":"<code>SSave.get_default(name)</code>","text":"<p>Returns <code>Any</code> \u2013 the default value defined in <code>add_value()</code>.</p> Name Type Required? Default Description <code>name</code> <code>String</code> Yes - The name of the value."},{"location":"ssave/#ssavesetname-value","title":"<code>SSave.set(name, value)</code>","text":"<p>Returns <code>SSave</code> \u2013 returns itself for chaining</p> Name Type Required? Default Description <code>name</code> <code>String</code> Yes - The name of the value. <code>value</code> <code>Any</code> Yes - The new value to set."},{"location":"ssave/#ssaveresetname","title":"<code>SSave.reset(name)</code>","text":"<p>Returns <code>SSave</code> \u2013 returns itself for chaining</p> Name Type Required? Default Description <code>name</code> <code>String</code> Yes - The name of the value. <p>Resets the value to its default as defined in <code>add_value()</code>.</p>"},{"location":"ssave/#ssavereset_all","title":"<code>SSave.reset_all()</code>","text":"<p>Returns <code>SSave</code> \u2013 returns itself for chaining</p> <p>Resets all values to their defaults as defined in <code>add_value()</code>.</p>"},{"location":"ssave/#ssaveerase","title":"<code>SSave.erase()</code>","text":"<p>Returns <code>SSave</code> \u2013 returns itself for chaining</p> <p>Deletes the saved file from disk if it exists.</p>"},{"location":"ssave/#ssaveset_protectionprotection","title":"<code>SSave.set_protection(protection)</code>","text":"<p>Returns <code>SSave</code> \u2013 returns itself for chaining</p> Name Type Required? Default Description <code>protection</code> <code>SSAVE_PROTECTION</code> Yes \u2014 The new protection level to set. <p>Updates the protection level of the save. This value gets cached, so you only need to call it once per change.</p> <p>Don't worry about keeping track of/updating protection levels when loading files, this is handled automatically by SSave when <code>load()</code> is called.</p>"},{"location":"ssave/#ssaveget_protection","title":"<code>SSave.get_protection()</code>","text":"<p>Returns <code>SSAVE_PROTECTION</code> \u2013 the current protection level</p> <p>Returns the current protection level of the save.</p>"},{"location":"ssave/#ssaveset_file_prefixfileprefix","title":"<code>SSave.set_file_prefix(filePrefix)</code>","text":"<p>Returns <code>SSave</code> \u2013 returns itself for chaining</p> Name Type Required? Default Description <code>filePrefix</code> <code>String</code> Yes \u2014 The new file prefix to set. <p>Updates the file prefix of the save. This is useful for things like save slots, where you want to have multiple saves of the same ssave class.</p>"},{"location":"ssave/#ssaveget_file_prefix","title":"<code>SSave.get_file_prefix()</code>","text":"<p>Returns <code>String</code></p> <p>Returns the current file prefix of the save.</p>"},{"location":"ssave/#ssaveget_full_name","title":"<code>SSave.get_full_name()</code>","text":"<p>Returns <code>String</code></p> <p>Returns the file prefix and name of the save, which is the full filename that will be written to disk.</p>"}]}